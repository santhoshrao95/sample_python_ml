{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Performance_metrics_Assignment","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"s0Ej_bXyQvnV"},"source":["# Compute performance metrics for the given Y and Y_score without sklearn"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VUnO04eaY2FN","executionInfo":{"status":"ok","timestamp":1643033664035,"user_tz":-330,"elapsed":3356,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"7cf39c32-1b0c-443f-9d0d-3bb0eb0aa826"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["file_path = \"/content/drive/MyDrive/5_Performance_metrics\""],"metadata":{"id":"EbM9wrqrZBt5","executionInfo":{"status":"ok","timestamp":1643033664036,"user_tz":-330,"elapsed":46,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"id":"4CHb6NE7Qvnc","executionInfo":{"status":"ok","timestamp":1643033664040,"user_tz":-330,"elapsed":48,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}}},"source":["import numpy as np\n","import pandas as pd\n","# other than these two you should not import any other packages"],"execution_count":36,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KbsWXuDaQvnq"},"source":["\n","## A. Compute performance metrics for the given data '5_a.csv'\n"," <pre>  <b>Note 1:</b> in this data you can see number of positive points >> number of negatives points\n","   <b>Note 2:</b> use pandas or numpy to read the data from <b>5_a.csv</b>\n","   <b>Note 3:</b> you need to derive the class labels from given score</pre> $y^{pred}= \\text{[0 if y_score < 0.5 else 1]}$\n","\n","<pre>\n","<ol>\n","<li> Compute Confusion Matrix </li>\n","<li> Compute F1 Score </li>\n","<li> Compute AUC Score, you need to compute different thresholds and for each threshold compute tpr,fpr and then use               numpy.trapz(tpr_array, fpr_array) <a href='https://stackoverflow.com/q/53603376/4084039'>https://stackoverflow.com/q/53603376/4084039</a>, <a href='https://stackoverflow.com/a/39678975/4084039'>https://stackoverflow.com/a/39678975/4084039</a> Note: it should be numpy.trapz(tpr_array, fpr_array) not numpy.trapz(fpr_array, tpr_array)\n","Note- Make sure that you arrange your probability scores in descending order while calculating AUC</li>\n","<li> Compute Accuracy Score </li>\n","</ol>\n","</pre>"]},{"cell_type":"code","metadata":{"id":"WaFLW7oBQvnt","executionInfo":{"status":"ok","timestamp":1643033664041,"user_tz":-330,"elapsed":47,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}}},"source":["df_a=pd.read_csv(file_path+'/'+'5_a.csv')\n","df_a.head(5)\n","df_a1 = df_a"],"execution_count":37,"outputs":[]},{"cell_type":"code","metadata":{"id":"yg8uUJvGAfCM","executionInfo":{"status":"ok","timestamp":1643033664042,"user_tz":-330,"elapsed":47,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}}},"source":["# write your code here for task A\n","df_a1['y_pred'] = df_a1['proba'] > 0.5\n","\n","df_a1.y_pred.replace([True,False],[1.0,0.0], inplace=True)"],"execution_count":38,"outputs":[]},{"cell_type":"code","source":["df_a1.rename(columns={'y':'y_actual'},inplace=True)\n","df_a1.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"JNw-zlMoGlrn","executionInfo":{"status":"ok","timestamp":1643033664043,"user_tz":-330,"elapsed":46,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"479eb4f1-c9c0-4897-9941-b84fdd3c973d"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-b4677cde-8c2e-401c-9aa1-9f1474c31d7a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>y_actual</th>\n","      <th>proba</th>\n","      <th>y_pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>0.637387</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>0.635165</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>0.766586</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>0.724564</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","      <td>0.889199</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4677cde-8c2e-401c-9aa1-9f1474c31d7a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b4677cde-8c2e-401c-9aa1-9f1474c31d7a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b4677cde-8c2e-401c-9aa1-9f1474c31d7a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   y_actual     proba  y_pred\n","0       1.0  0.637387     1.0\n","1       1.0  0.635165     1.0\n","2       1.0  0.766586     1.0\n","3       1.0  0.724564     1.0\n","4       1.0  0.889199     1.0"]},"metadata":{},"execution_count":39}]},{"cell_type":"markdown","source":[" ### A.1. Compute the confusion matrix\n","\n"],"metadata":{"id":"mF8GhI-FI7AJ"}},{"cell_type":"code","source":["\n","TP = df_a1[(df_a1['y_actual'] == 1.0)  &  (df_a1['y_pred'] == 1.0)].count()\n","FP = df_a1[(df_a1['y_actual'] == 0.0)  &  (df_a1['y_pred'] == 1.0)].count()\n","FN = df_a1[(df_a1['y_actual'] == 1.0)  &  (df_a1['y_pred'] == 0.0)].count()\n","TN = df_a1[(df_a1['y_actual'] == 0.0)  &  (df_a1['y_pred'] == 0.0)].count()\n","\n","CM = [[TP[0],FP[0]],[FN[0],TN[0]]]\n","CM"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jo1L5IirIdpx","executionInfo":{"status":"ok","timestamp":1643033664044,"user_tz":-330,"elapsed":42,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"e0151252-093f-4011-d5fd-ef7cd552ac94"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[10000, 100], [0, 0]]"]},"metadata":{},"execution_count":40}]},{"cell_type":"markdown","source":[" ### A.2. Compute F1-score\n","\n"," \n","1.   PRECISION: Of all the points model predicted to be positive how many are actually positive. $\\frac{TP}{TP+FP}$\n","\n","2.   RECALL: Of all the actually positive points how many predicted positive by model. $\\frac{TP}{TP+FN}$\n","\n","3.   F1-SCORE = $\\frac{2*Pr*re}{Pr+Re}$\n"],"metadata":{"id":"vOBRlRASal-k"}},{"cell_type":"code","source":["Pr =  (df_a1[(df_a1['y_actual'] == 1.0)  &  (df_a1['y_pred'] == 1.0)].count()[0])/(df_a1[(df_a1['y_pred'] == 1.0)].count()[0])\n","Re =  (df_a1[(df_a1['y_actual'] == 1.0)  &  (df_a1['y_pred'] == 1.0)].count()[0])/(df_a1[(df_a1['y_actual'] == 1.0)].count()[0])\n","\n","f1_score = (2*Pr*Re)/(Pr+Re)\n","\n","print('\\nPrecision = ',Pr)\n","print('\\nRecall = ',Re)\n","print('\\nF1-Score = ',f1_score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VZhybPA4czC8","executionInfo":{"status":"ok","timestamp":1643033664044,"user_tz":-330,"elapsed":33,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"5322086b-d91d-47ef-a996-955f843c00a5"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Precision =  0.9900990099009901\n","\n","Recall =  1.0\n","\n","F1-Score =  0.9950248756218906\n"]}]},{"cell_type":"markdown","source":["### A.3. Compute AUC Score"],"metadata":{"id":"VdT8WFAmi0Sy"}},{"cell_type":"code","source":["df_a2 = df_a1.sort_values(by = 'proba',ascending= False)\n","threshold = df_a2['proba'].unique()\n","threshold"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vbiFyVSrgzYD","executionInfo":{"status":"ok","timestamp":1643033664399,"user_tz":-330,"elapsed":384,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"aeff9585-feda-47d8-9eca-2908273f3222"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.89996535, 0.89982831, 0.89982485, ..., 0.50005801, 0.50004734,\n","       0.50001859])"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["\n","\n","tpr_array = []\n","fpr_array = []\n","\n","for i, tau in enumerate(threshold):\n","\n","  df_a2['y_tau'] = df_a2['proba'] > tau\n","  df_a2['y_tau'].replace([True, False],[1,0],inplace=True)\n","  \n","  TP = df_a2[(df_a2['y_actual'] == 1.0)  &  (df_a2['y_tau'] == 1.0)].count()[0]\n","  FP = df_a2[(df_a2['y_actual'] == 0.0)  &  (df_a2['y_tau'] == 1.0)].count()[0]\n","  #FN = df_a2[(df_a2['y_actual'] == 1.0)  &  (df_a2['y_tau'] == 0.0)].count()[0]\n","  #TN = df_a2[(df_a2['y_actual'] == 0.0)  &  (df_a2['y_tau'] == 0.0)].count()[0]\n","\n","  tpr_array.append(TP/(df_a2[(df_a2['y_actual'] == 1.0)].count()[0])) #TPR = TP/P\n","  fpr_array.append(FP/(df_a2[(df_a2['y_actual'] == 0.0)].count()[0])) #FPR = FP/P\n","\n","AUC = np.trapz(tpr_array, fpr_array)"],"metadata":{"id":"ZXJRuCUHik_c","executionInfo":{"status":"ok","timestamp":1643033772344,"user_tz":-330,"elapsed":107948,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.plot(fpr_array,tpr_array,label='ROC Curve')\n","plt.title('ROC Curve for \\'df_a\\' data')\n","plt.xlabel('FPR')\n","plt.ylabel('TPR')\n","plt.legend()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":312},"id":"bfCVqBgihXTE","executionInfo":{"status":"ok","timestamp":1643033772348,"user_tz":-330,"elapsed":44,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"d29f61b6-331d-4771-acce-fe8ae72017a9"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f2d79979090>"]},"metadata":{},"execution_count":44},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["print(\"AUC = \",AUC)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MBLPLRQe7bzl","executionInfo":{"status":"ok","timestamp":1643033772353,"user_tz":-330,"elapsed":30,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"00cceaca-7951-4c4e-da85-b5b58933d8e6"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["AUC =  0.48829900000000004\n"]}]},{"cell_type":"markdown","source":["### A.4. Compute Accuracy Score"],"metadata":{"id":"FYNmHq9n6nrn"}},{"cell_type":"code","source":["correctly_classified_points = df_a2[(df_a2['y_actual'] == df_a2['y_pred'])].count()[0]\n","total_classified_points = df_a2.count()[0]\n","\n","accuracy = correctly_classified_points/total_classified_points\n","\n","print(\"Accuracy score = \", accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l-tOXT9l6nC1","executionInfo":{"status":"ok","timestamp":1643033772355,"user_tz":-330,"elapsed":27,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"4e07b208-329f-489b-d7dd-a01d6229f627"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy score =  0.9900990099009901\n"]}]},{"cell_type":"markdown","metadata":{"id":"V5KZem1BQvn2"},"source":["\n","\n","## B. Compute performance metrics for the given data '5_b.csv'\n","<pre>\n","   <b>Note 1:</b> in this data you can see number of positive points << number of negatives points\n","   <b>Note 2:</b> use pandas or numpy to read the data from <b>5_b.csv</b>\n","   <b>Note 3:</b> you need to derive the class labels from given score</pre> $y^{pred}= \\text{[0 if y_score < 0.5 else 1]}$\n","\n","<pre>\n","<ol>\n","<li> Compute Confusion Matrix </li>\n","<li> Compute F1 Score </li>\n","<li> Compute AUC Score, you need to compute different thresholds and for each threshold compute tpr,fpr and then use               numpy.trapz(tpr_array, fpr_array) <a href='https://stackoverflow.com/q/53603376/4084039'>https://stackoverflow.com/q/53603376/4084039</a>, <a href='https://stackoverflow.com/a/39678975/4084039'>https://stackoverflow.com/a/39678975/4084039</a>\n","Note- Make sure that you arrange your probability scores in descending order while calculating AUC</li>\n","<li> Compute Accuracy Score </li>\n","</ol>\n","</pre>"]},{"cell_type":"code","metadata":{"id":"U2sKlq0YQvn5","executionInfo":{"status":"ok","timestamp":1643033773191,"user_tz":-330,"elapsed":859,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}}},"source":["df_b=pd.read_csv(file_path+'/'+'5_b.csv')\n","df_b.head()\n","df_b1 = df_b"],"execution_count":47,"outputs":[]},{"cell_type":"code","source":["# write your code here for task A\n","df_b1['y_pred'] = df_b1['proba'] > 0.5\n","\n","df_b1.y_pred.replace([True,False],[1.0,0.0], inplace=True)"],"metadata":{"id":"89HI_YUk8FnX","executionInfo":{"status":"ok","timestamp":1643033773192,"user_tz":-330,"elapsed":49,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["df_b1.rename(columns={'y':'y_actual'},inplace=True)\n","df_b1.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Nlo90K8N8PV9","executionInfo":{"status":"ok","timestamp":1643033773193,"user_tz":-330,"elapsed":46,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"93985b14-fbea-4262-ae06-274860250a95"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-ae37eb7a-07cd-41ed-b174-7c72c44202d3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>y_actual</th>\n","      <th>proba</th>\n","      <th>y_pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.281035</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>0.465152</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>0.352793</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>0.157818</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0.276648</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae37eb7a-07cd-41ed-b174-7c72c44202d3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ae37eb7a-07cd-41ed-b174-7c72c44202d3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ae37eb7a-07cd-41ed-b174-7c72c44202d3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   y_actual     proba  y_pred\n","0       0.0  0.281035     0.0\n","1       0.0  0.465152     0.0\n","2       0.0  0.352793     0.0\n","3       0.0  0.157818     0.0\n","4       0.0  0.276648     0.0"]},"metadata":{},"execution_count":49}]},{"cell_type":"markdown","source":[" ### B.1. Compute the confusion matrix"],"metadata":{"id":"ITcE4jRk8P_V"}},{"cell_type":"code","source":["\n","TP = df_b1[(df_b1['y_actual'] == 1.0)  &  (df_b1['y_pred'] == 1.0)].count()\n","FP = df_b1[(df_b1['y_actual'] == 0.0)  &  (df_b1['y_pred'] == 1.0)].count()\n","FN = df_b1[(df_b1['y_actual'] == 1.0)  &  (df_b1['y_pred'] == 0.0)].count()\n","TN = df_b1[(df_b1['y_actual'] == 0.0)  &  (df_b1['y_pred'] == 0.0)].count()\n","\n","CM = [[TP[0],FP[0]],[FN[0],TN[0]]]\n","CM"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sHjlrZZ68YvV","executionInfo":{"status":"ok","timestamp":1643033773193,"user_tz":-330,"elapsed":41,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"e2a9b2e7-e2e9-4e81-f9ff-c26b7c83607b"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[55, 239], [45, 9761]]"]},"metadata":{},"execution_count":50}]},{"cell_type":"markdown","source":[" ### B.2. Compute F1-score\n","\n"," \n","1.   PRECISION: Of all the points model predicted to be positive how many are actually positive. $\\frac{TP}{TP+FP}$\n","\n","2.   RECALL: Of all the actually positive points how many predicted positive by model. $\\frac{TP}{TP+FN}$\n","\n","3.   F1-SCORE = $\\frac{2*Pr*re}{Pr+Re}$\n","\n","\n","\n"],"metadata":{"id":"C_3U1tQP8gKO"}},{"cell_type":"code","source":["Pr =  (df_b1[(df_b1['y_actual'] == 1.0)  &  (df_b1['y_pred'] == 1.0)].count()[0])/(df_b1[(df_b1['y_pred'] == 1.0)].count()[0])\n","Re =  (df_b1[(df_b1['y_actual'] == 1.0)  &  (df_b1['y_pred'] == 1.0)].count()[0])/(df_b1[(df_b1['y_actual'] == 1.0)].count()[0])\n","\n","f1_score = (2*Pr*Re)/(Pr+Re)\n","\n","print('\\nPrecision = ',Pr)\n","print('\\nRecall = ',Re)\n","print('\\nF1-Score = ',f1_score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ft5ABbOw8m2g","executionInfo":{"status":"ok","timestamp":1643033773194,"user_tz":-330,"elapsed":29,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"d3b63a39-9c21-4478-eb47-d173ff2440a9"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Precision =  0.1870748299319728\n","\n","Recall =  0.55\n","\n","F1-Score =  0.2791878172588833\n"]}]},{"cell_type":"markdown","source":["### A.3. Compute AUC Score"],"metadata":{"id":"KyGRbNJI8qoi"}},{"cell_type":"code","source":["df_b2 = df_b1.sort_values(by = 'proba',ascending= False)\n","threshold = df_b2['proba'].unique()\n","threshold"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dNwAU7IuiJXT","executionInfo":{"status":"ok","timestamp":1643033773195,"user_tz":-330,"elapsed":27,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"3e598094-def3-4536-fd99-87d049db39b6"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.59529418, 0.5948084 , 0.59219787, ..., 0.10016508, 0.1001608 ,\n","       0.10000141])"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["\n","tpr_array = []\n","fpr_array = []\n","\n","for i, tau in enumerate(threshold):\n","\n","  df_b2['y_tau'] = df_b2['proba'] > tau\n","  df_b2['y_tau'].replace([True, False],[1,0],inplace=True)\n","  \n","  TP = df_b2[(df_b2['y_actual'] == 1.0)  &  (df_b2['y_tau'] == 1.0)].count()[0]\n","  FP = df_b2[(df_b2['y_actual'] == 0.0)  &  (df_b2['y_tau'] == 1.0)].count()[0]\n","  #FN = df_b2[(df_b2['y_actual'] == 1.0)  &  (df_b2['y_tau'] == 0.0)].count()[0]\n","  #TN = df_b2[(df_b2['y_actual'] == 0.0)  &  (df_b2['y_tau'] == 0.0)].count()[0]\n","\n","  tpr_array.append(TP/(df_b2[(df_b2['y_actual'] == 1.0)].count()[0])) #TPR = TP/P\n","  fpr_array.append(FP/(df_b2[(df_b2['y_actual'] == 0.0)].count()[0])) #FPR = FP/P\n","\n","AUC = np.trapz(tpr_array, fpr_array)"],"metadata":{"id":"Kh1qQP9m8tcK","executionInfo":{"status":"ok","timestamp":1643033877459,"user_tz":-330,"elapsed":104285,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["plt.plot(fpr_array,tpr_array,label='ROC Curve')\n","plt.title('ROC Curve for \\'df_b\\' data')\n","plt.xlabel('FPR')\n","plt.ylabel('TPR')\n","plt.legend()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":312},"id":"RBYZqcBsiQ_-","executionInfo":{"status":"ok","timestamp":1643033877466,"user_tz":-330,"elapsed":47,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"60f84f70-029f-4712-95a6-e3828d7b6833"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f2d79844bd0>"]},"metadata":{},"execution_count":54},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["print(\"AUC = \",AUC)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xrI2Rm088wq7","executionInfo":{"status":"ok","timestamp":1643033877469,"user_tz":-330,"elapsed":38,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"8dfb0257-7e54-4e0d-88c4-7acad7a47036"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["AUC =  0.9376570000000001\n"]}]},{"cell_type":"markdown","source":["### B.4. Compute Accuracy Score"],"metadata":{"id":"eb5m0GqV8z0f"}},{"cell_type":"code","metadata":{"id":"xlLVa-cVAfCS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643033877471,"user_tz":-330,"elapsed":36,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"3472a2e2-db8c-478e-996f-d832f66c1b5f"},"source":["correctly_classified_points = df_b2[(df_b2['y_actual'] == df_b2['y_pred'])].count()[0]\n","total_classified_points = df_b2.count()[0]\n","\n","accuracy = correctly_classified_points/total_classified_points\n","\n","print(\"Accuracy score = \", accuracy)"],"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy score =  0.9718811881188119\n"]}]},{"cell_type":"markdown","metadata":{"id":"GiPGonTzQvoB"},"source":["## C. Compute the best threshold (similarly to ROC curve computation) of probability which gives lowest values of metric <b>A</b> for the given data \n","<br>\n","\n","you will be predicting label of a data points like this: $y^{pred}= \\text{[0 if y_score < threshold  else 1]}$\n","\n","$ A = 500 \\times \\text{number of false negative} + 100 \\times \\text{numebr of false positive}$\n","\n","<pre>\n","   <b>Note 1:</b> in this data you can see number of negative points > number of positive points\n","   <b>Note 2:</b> use pandas or numpy to read the data from <b>5_c.csv</b>\n","</pre>"]},{"cell_type":"code","metadata":{"id":"x5HIJzq1QvoE","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1643033877473,"user_tz":-330,"elapsed":34,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"07410480-6c81-4310-8acc-d426fab9e8b3"},"source":["df_c=pd.read_csv(file_path+'/'+'5_c.csv')\n","df_c.rename(columns={'y':'y_actual'},inplace=True)\n","df_c.head()"],"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-21220ed9-136f-42bc-b002-65a8c38caee9\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>y_actual</th>\n","      <th>prob</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0.458521</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0.505037</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0.418652</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0.412057</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0.375579</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21220ed9-136f-42bc-b002-65a8c38caee9')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-21220ed9-136f-42bc-b002-65a8c38caee9 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-21220ed9-136f-42bc-b002-65a8c38caee9');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   y_actual      prob\n","0         0  0.458521\n","1         0  0.505037\n","2         0  0.418652\n","3         0  0.412057\n","4         0  0.375579"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["\n","df_c2 = df_c.sort_values(by = 'prob',ascending= False)\n","threshold = df_c2['prob'].unique()\n","threshold\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eIi0hXjHjiFL","executionInfo":{"status":"ok","timestamp":1643033877474,"user_tz":-330,"elapsed":33,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"ece49d3d-c40e-4919-a53a-de7d03d4ca10"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.9577468 , 0.95143692, 0.94863779, ..., 0.02896366, 0.02839574,\n","       0.02803799])"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["\n","def A(fn,fp):\n","  return (500*fn + 100*fp)\n","a = []\n","min_value = float('inf')\n","best_threshold = 0.0\n","for i, tau in enumerate(threshold):\n","\n","  df_c2['y_tau'] = (df_c2['prob'] < tau).replace([True, False],[0,1])\n","\n","  #df_c2['y_tau'] = df_c2['prob'] > tau\n","  #df_c2['y_tau'].replace([True, False],[1,0],inplace=True)\n","  \n","  #TP = df_c2[(df_c2['y_actual'] == 1.0)  &  (df_c2['y_tau'] == 1.0)].count()[0]\n","  FP = df_c2[(df_c2['y_actual'] == 0.0)  &  (df_c2['y_tau'] == 1.0)].count()[0]\n","  FN = df_c2[(df_c2['y_actual'] == 1.0)  &  (df_c2['y_tau'] == 0.0)].count()[0]\n","  #TN = df_c2[(df_c2['y_actual'] == 0.0)  &  (df_c2['y_tau'] == 0.0)].count()[0]\n","\n","  if A(FN,FP) < min_value:\n","    best_threshold = tau\n","    min_value = A(FN,FP)\n","\n"],"metadata":{"id":"6TweqLfBjwkN","executionInfo":{"status":"ok","timestamp":1643033890789,"user_tz":-330,"elapsed":13345,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}}},"execution_count":59,"outputs":[]},{"cell_type":"code","source":["print(best_threshold)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s9UnGx3Nk-wc","executionInfo":{"status":"ok","timestamp":1643033890793,"user_tz":-330,"elapsed":55,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"6b69178e-8541-47c8-b487-dcf6ce3f8c4c"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["0.2300390278970873\n"]}]},{"cell_type":"markdown","metadata":{"id":"sD4CcgjXQvoL"},"source":["\n","## D.</b></font> Compute performance metrics(for regression) for the given data 5_d.csv\n","<pre>    <b>Note 2:</b> use pandas or numpy to read the data from <b>5_d.csv</b>\n","    <b>Note 1:</b> <b>5_d.csv</b> will having two columns Y and predicted_Y both are real valued features\n","<ol>\n","<li> Compute Mean Square Error </li>\n","<li> Compute MAPE: https://www.youtube.com/watch?v=ly6ztgIkUxk</li>\n","<li> Compute R^2 error: https://en.wikipedia.org/wiki/Coefficient_of_determination#Definitions </li>\n","</ol>\n","</pre>"]},{"cell_type":"code","metadata":{"id":"sVOj-bF9AfCd","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1643033890796,"user_tz":-330,"elapsed":36,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"3af2c4ec-271e-4e55-8321-ff6d3da8ff70"},"source":["df_d=pd.read_csv(file_path + '/'+'5_d.csv')\n","df_d.head()"],"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-7876d622-5950-40d4-8910-bb30fc20b03d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>y</th>\n","      <th>pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>101.0</td>\n","      <td>100.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>120.0</td>\n","      <td>100.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>131.0</td>\n","      <td>113.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>164.0</td>\n","      <td>125.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>154.0</td>\n","      <td>152.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7876d622-5950-40d4-8910-bb30fc20b03d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7876d622-5950-40d4-8910-bb30fc20b03d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7876d622-5950-40d4-8910-bb30fc20b03d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["       y   pred\n","0  101.0  100.0\n","1  120.0  100.0\n","2  131.0  113.0\n","3  164.0  125.0\n","4  154.0  152.0"]},"metadata":{},"execution_count":61}]},{"cell_type":"markdown","source":["### D.1. Compute Mean Square Error "],"metadata":{"id":"FhjH0inWrn56"}},{"cell_type":"code","source":["MSE = np.square(df_d['y'] - df_d['pred']).sum() / df_d.count()[0]\n","print(\"\\nMean Squared Error = {0}\".format(MSE))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2xioZctyrlpT","executionInfo":{"status":"ok","timestamp":1643033890797,"user_tz":-330,"elapsed":34,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"13340e5b-3b3b-419f-cc87-edbed1231458"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Mean Squared Error = 177.16569974554707\n"]}]},{"cell_type":"markdown","source":["### D.2. Compute MAPE\n","$\\sum_{i=1}^{n} \\frac{\\left | e_i \\right |}{a_i}$"],"metadata":{"id":"FQBQfi8XtXyN"}},{"cell_type":"code","source":["MAPE = (np.absolute(df_d['pred'] - df_d['y']).sum()) / (df_d['y'].sum())\n","MAPE"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kw1IOqZrsAOP","executionInfo":{"status":"ok","timestamp":1643033890798,"user_tz":-330,"elapsed":28,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"4a2bdf12-3308-4791-d559-1f67dd61e245"},"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.1291202994009687"]},"metadata":{},"execution_count":63}]},{"cell_type":"markdown","source":["### D.3. Compute R^2 error\n","\n","$R^2 = 1-\\frac{SS_{res}}{SS_{tot}}$"],"metadata":{"id":"XsF83mJ84eXm"}},{"cell_type":"code","metadata":{"id":"uRhL1pheAfCe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643033890799,"user_tz":-330,"elapsed":25,"user":{"displayName":"SANTHOSH RAO M","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GikwIWSA_rLaOzkOvoj2ULU0i-GEYA8peN50Wwk=s64","userId":"18004694688430260056"}},"outputId":"2ca0c5ed-b82c-4bd5-e878-8b61da67dc9d"},"source":["ss_res = np.square(df_d['y'] - df_d['pred']).sum()\n","ss_tot = np.square(df_d['y'] - df_d['pred'].mean()).sum()\n","\n","r_2 = 1.0 - (ss_res/ss_tot)\n","r_2"],"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9563583447288622"]},"metadata":{},"execution_count":64}]}]}